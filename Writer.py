#!/usr/bin/env python2
# -*- coding: utf-8 -*-
"""
Created on Thu Apr 13 10:14:33 2017

@author: selin
"""

import xml.etree.ElementTree as ET
from collections import defaultdict

class Writer(object):
    """Writer generates customized config file and command line parameters 
        for each instance. Choice is made upon flag generated by Distributor."""
        
    def __init__(self, data, content):
        self.data = data
        self.content = content
        
    def eval_input(self, suite):
        
        options = defaultdict(lambda: (None, None), 
                              {'version': (suite, None), 
                               'test': (None, suite), 
                               'versiontest': (suite[0], suite[-1])})
        return options[self.content]
        
    def get_parameters(self, suite):
        
        cl_params = self.data['CL-params']
        with open('cl-params.txt', 'w') as cl_file:
            # TODO: adapt config-file path
            for param in cl_params:
                cl_file.write(param + ' ' + cl_params[param] + ' ')
            if suite[0]: # if suite has elements, add --tests flag
                tmp='--tests '
                for i in range(0, len(suite)-1): 
                    tmp += suite[i] + ','
                tmp += suite[-1]
                cl_file.write(tmp)
        return cl_file
    
    def get_config(self, suite):
        
        tree = ET.parse(self.data['config'])
        root = tree.getroot()
        # adapt start and end tag in config for each instance
        root.find('.//project').attrib['dir'] = '/home/selin/tmp/project/' + root.find('.//project').attrib['dir'].split('/')[-1]
        root.find('.//project/jmh_root').attrib['dir'] = '/home/selin/tmp/project/benchmarks'
        if suite[0]: # if suite has elements 
            root.find('.//project/versions/start').text = suite[0] # only do this if VersionDistributor or TestVersionDistributor
            root.find('.//project/versions/end').text = suite[-1]
        config = 'cloud-config.xml'
        tree.write(config, encoding='utf-8', xml_declaration=True)
        return config
    
    def get_multi_configs(self, suite):
        
        if suite[-1]=='random':
            configs = []
            for s in suite:
                configs.append(self.get_config(s))
            return configs
                
    
    def generate_input(self, test_suite):
        
        versions, tests = self.eval_input(test_suite)
        config = self.get_config(versions)
        param = self.get_parameters(tests)
        return config, param
    
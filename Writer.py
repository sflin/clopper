#!/usr/bin/env python2
# -*- coding: utf-8 -*-
"""
Created on Thu Apr 13 10:14:33 2017

@author: selin
"""

import json
import xml.etree.ElementTree as ET
from Distributor import Distributor, TestDistributor, VersionDistributor, VersionTestDistributor
from collections import defaultdict

class Writer(object):
    """Writer generates customized config file and command line parameters 
        for each instance. Choice is made upon flag generated by distributor."""
        
    def __init__(self, data, content):
        self.data = data
        self.content = content
        
    def eval_input(self, suite):
        
        options = defaultdict(lambda: (None, None), 
                              {'version': (suite, None), 
                               'test': (None, suite), 
                               'versiontest': (suite[0], suite[1])})
        return options[self.content]
        
    def get_parameters(self, suite):
        
        cl_params = self.data['CL-params']
        #print self.data['CL-params']
        if suite:
            tmp = ''
            for i in range(0,len(suite)-1):
                tmp += suite[i] + ','
            tmp += suite[-1]
            cl_params['--tests'] = tmp
            # add --tests for TestDistributor    
        cl_params['-f'] = 'new-config.xml' # overwrite local config-specification
        # generate file containing individual command line arguments
        with open('./cl-params.txt', 'w') as cl_file:
            for param in cl_params:
                cl_file.write(param + ' ' + cl_params[param] + ' ')
        # TODO: fix this, why is cl_params global?
        if suite:
            del cl_params['--tests']
        return cl_file
    
    def get_config(self, suite):
        
        tree = ET.parse(self.data['CL-params']['-f'])
        root = tree.getroot()
        # adapt start and end tag in config for each instance
        # TODO: check path project-tag
        root.find('.//project').attrib['dir'] = '~/project' + data['project'].split('/')[-1]
        root.find('.//project/jmh_root').attrib['dir'] = '~/project' + data['project'].split('/')[-1]
        if suite:
            root.find('.//project/versions/start').text = suite[0] # only do this if VersionDistributor or TestVersionDistributor
            root.find('.//project/versions/end').text = suite[-1]
        config = 'new-config.xml'
        tree.write(config)
        return config
    
    def generate_input(self, test_suite):
        
        versions, tests = self.eval_input(test_suite)
        config = self.get_config(versions)
        param = self.get_parameters(tests)
        return config, param

   
    
if __name__ == "__main__" :
    data = json.loads("""{
                          "mode": "ip",
                          "total": 3,
                          "ip-list": {
                            "instance-1": "130.211.94.53"
                          },
                          "CL-params": {
                            "-f": "/home/selin/Documents/Uni/Bachelorthesis/clopper/config.xml",
                            "-o": "./output.csv",
                            "-t": "benchmark",
                            "-b": "versions"
                          },
                          "project": "/home/selin/Documents/Uni/Bachelorthesis/tests",
                          "distribution": "TestDistributor",
                          "status-mode": "ALL"
                        }""")   
    
    distributor = Distributor(data, strategy=TestDistributor)
    test_data = distributor.split()
    distributor = Distributor(data, strategy=VersionDistributor)
    versions = distributor.split()
    distributor = Distributor(data, strategy=VersionTestDistributor)
    mixed = distributor.split()
    
    writer = Writer(data, content=test_data.content)
    writer2 = Writer(data, content=versions.content)
    config, param = writer.generate_input(test_data[0])
    with open('./cl-params.txt', 'r') as f:
        for l in f.readlines():
            print l
    writer.content = versions.content
    config2, param2 = writer2.generate_input(versions[0])
    with open('./cl-params.txt', 'r') as f:
        for l in f.readlines():
            print l
    """writer.content = mixed.content
    config3, param3 = writer.generate_input(mixed[0])
    writer.content = None
    with open('./cl-params.txt', 'r') as f:
        for l in f.readlines():
            print l
    config4, param4 = writer.generate_input(versions[0])
    with open('./cl-params.txt', 'r') as f:
        for l in f.readlines():
            print l"""
    